{"version":3,"sources":["firebase.js","components/Nominations.js","components/Results.js","components/Search.js","components/Footer.js","components/App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Loading","styled","div","List","p","Nominations","state","movieArray","count","hide","dbRef","database","ref","handleRemove","key","id","child","remove","props","removeId","addHide","setTimeout","setState","this","on","response","movies","val","property","push","movie","length","nominated","map","array","title","nomtitle","releaseDate","nomyear","nomid","poster","nomposter","className","src","onClick","Component","MainContainer","Results","firebaseData","movieIds","nominate","e","preventDefault","target","attributes","value","then","swal","icon","button","checkID","includes","newState","filter","movieId","displayResults","res","results","Title","Year","imdbID","Poster","isDisabled","display","disabled","SearchContainer","ResultsContainer","Search","userInput","error","loading","searchParam","api","url","fetch","json","data","onSubmit","htmlFor","type","name","placeholder","onChange","required","FooterStyle","Footer","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9d1156a.chunk.js","sourcesContent":["import firebase from 'firebase/app';    //firebase\r\nimport 'firebase/database';             //firebase database\r\n\r\n    // Your web app's Firebase configuration\r\n    const firebaseConfig = {\r\n        apiKey: \"AIzaSyCvQZTPOKGyCD5KyV5EsX8xpXBkshrmhXI\",\r\n        authDomain: \"the-shoppies-6b8ee.firebaseapp.com\",\r\n        projectId: \"the-shoppies-6b8ee\",\r\n        storageBucket: \"the-shoppies-6b8ee.appspot.com\",\r\n        messagingSenderId: \"881448932273\",\r\n        appId: \"1:881448932273:web:8f19ae0c0c5da32f01a390\"\r\n    };\r\n    // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n\r\n    export default firebase;\r\n","import React, { Component } from 'react';\r\nimport firebase from '../firebase';  \r\nimport styled from 'styled-components';\r\n\r\nconst Loading = styled.div`\r\n    font-weight: 900;\r\n    font-size: 2rem;\r\n    color: #000;\r\n    padding: 50px;\r\n    \r\n    .hide {\r\n        display: none;\r\n    }\r\n`;\r\n\r\nconst List = styled.p`\r\n    font-weight: 900;\r\n    font-size: 3rem;\r\n    color: #000;\r\n    padding: 10px;\r\n    text-align: center;\r\n    letter-spacing: 2.5px;\r\n`;\r\n\r\n\r\nclass Nominations extends Component {\r\n\r\n    state = {\r\n        movieArray: [],\r\n        count: '',\r\n        hide: ''\r\n    }\r\n\r\n    // open portal to Firebase\r\n    dbRef = firebase.database().ref();\r\n\r\n    //pull data from firebase\r\n    componentDidMount() {\r\n        this.dbRef.on('value', (response) => {\r\n\r\n            const movies = response.val()\r\n            const movieArray = []\r\n            \r\n            for (const property in movies) {\r\n                movieArray.push({\r\n                    key: property, \r\n                    movie: movies[property]\r\n                });  \r\n            }\r\n\r\n            this.setState({\r\n                movieArray\r\n            }, () => {\r\n                if(this.state.movieArray.length) {\r\n                    this.setState({\r\n                        count: this.state.movieArray.length\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    // Remove Saved Song from DOM\r\n    handleRemove = (key, id) => {\r\n        // Remove from database\r\n        this.dbRef.child(key).remove(); \r\n\r\n        this.props.removeId(id)\r\n    }\r\n\r\n    // Add hide to className if there are no nominees\r\n    addHide = () => {\r\n        if(this.state.count === '') {\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    hide: 'hide'\r\n                })\r\n            }, 3000 )\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        this.addHide();\r\n        // maps through movies stored in firebase\r\n        const nominated = this.state.movieArray.map(array => {\r\n\r\n            const { nomtitle: title, nomyear: releaseDate, nomid: id, nomposter: poster} = array.movie\r\n            const key = array.key\r\n\r\n            return (    <li key={key} id={id}>\r\n                            <div className=\"nominated\">\r\n                                <img src={poster}/>\r\n                                <p className=\"nomInfo\">{title} ({releaseDate})</p>\r\n                                <button onClick={() => this.handleRemove(key, id)} key={key}>\r\n                                Remove\r\n                                </button>\r\n                            </div>\r\n                        </li>\r\n            );\r\n        })\r\n\r\n        return (\r\n            <div className=\"nomContainer\">\r\n                <List>Nomination List</List>\r\n\r\n                {/* informs user the nominated movies are being loaded  */}\r\n                { this.state.count === ''\r\n                ?\r\n                <Loading>\r\n                    <p className={this.state.hide}>loading list of nominated movies...</p>\r\n                </Loading>\r\n                :\r\n                null               \r\n                }\r\n\r\n                {/* ternary operator which displays a banner when 5 movies have been nominated */}\r\n                { this.state.count === 5 \r\n                ?                     \r\n                <p className=\"nomCount\">You have nominated {this.state.count} movies</p> \r\n                :\r\n                null}\r\n\r\n                <ul>\r\n                    {nominated}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nominations;","import React, { Component } from 'react';\r\nimport Nominations from './Nominations';\r\nimport firebase from '../firebase';  \r\nimport styled from 'styled-components';\r\nimport swal from 'sweetalert';\r\n\r\nconst MainContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    \r\n    div {\r\n        background-color: rgb(0, 128, 96);\r\n        padding-top: 20px;\r\n        ul li {\r\n            display: flex;\r\n        }\r\n    }\r\n\r\n    .results {\r\n        width: 48%;\r\n        min-height: 600px;\r\n    }\r\n\r\n    img {\r\n        width: 150px;\r\n        margin: 10px 0;\r\n    }\r\n\r\n    /* TABLET MEDIA QUERY*/\r\n    @media (max-width: 850px) {\r\n        flex-direction: column;\r\n\r\n        .results {\r\n            width: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nclass Results extends Component {\r\n\r\n    state = {\r\n        firebaseData: {\r\n            nomtitle: '',\r\n            nomyear: '',\r\n            nomid: '',\r\n            nomposter: ''\r\n        },\r\n        movieArray: [],\r\n        movieIds: [],\r\n    }\r\n\r\n    // OPEN PORTAL TO FIREBASE\r\n    dbRef = firebase.database().ref()\r\n\r\n    // GET DATA FROM FIREBASE DATABASE\r\n    componentDidMount() {\r\n        this.dbRef.on('value', (response) => {\r\n\r\n            const movies = response.val()\r\n            const movieArray = []\r\n            \r\n            for (const property in movies) {\r\n                movieArray.push({\r\n                    key: property, \r\n                    movie: movies[property]\r\n                });  \r\n            }\r\n            this.setState({\r\n                movieArray,\r\n            })\r\n\r\n            const movieIds = []\r\n            this.state.movieArray.map(movies => {\r\n                return movieIds.push(movies.movie.nomid) \r\n            })\r\n\r\n            this.setState({\r\n                movieIds,\r\n            })\r\n        })\r\n    }  \r\n\r\n// WHEN USER CLICKS NOMINATE PUSH MOVIE DATA TO DATABASE \r\n    nominate = (e) => {\r\n        e.preventDefault();\r\n\r\n        const nomtitle = e.target.attributes.nomtitle.value\r\n        const nomyear =  e.target.attributes.nomyear.value\r\n        const nomid =  e.target.attributes.nomid.value\r\n        const nomposter =  e.target.attributes.nomposter.value\r\n        \r\n        if(this.state.movieIds.length < 5) {\r\n            this.dbRef.push({\r\n                nomtitle,\r\n                nomyear,\r\n                nomid,\r\n                nomposter\r\n            }).then(() => {\r\n                // Update movieIds with current nominated list items\r\n                this.setState(state => ({\r\n                    movieIds: [...state.movieIds,nomid]\r\n                }))\r\n            })\r\n        }  if(this.state.movieIds.length === 5) {\r\n            // DISPLAYS AN ALERT LIMIT HAS BEEN REACHED\r\n                swal({\r\n                title: \"Nomination limit reached! Remove to add a different Movie\",\r\n                icon: \"error\",\r\n                button: \"OK\",\r\n            });\r\n        }\r\n    }\r\n\r\n// CHECK IF MOVIE ID RESULTS MATCH THE NOMINATED MOVIE IDS || TRUE=DISABLED / FALSE=ENABLED\r\n    checkID = (id) => this.state.movieIds.includes(id)\r\n\r\n// REMOVE NOMINATED MOVIE FROM LIST CONTAINER ADN DATABASE\r\n    removeId = (id) => {\r\n        const oldState = [...this.state.movieIds]\r\n        const newState = oldState.filter(movieId => movieId !== id)\r\n        this.setState({\r\n            movieIds: newState,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // MAP THROUGH THE PROPS PASSED FROM THE SEARCH COMPONENT\r\n        const displayResults = this.props.res.map(results => {\r\n            const { Title: title, Year: releaseDate, imdbID: id, Poster} = results\r\n            const isDisabled = this.checkID(id);\r\n\r\n        // DISPLAY RESULTS TO THE DOM \r\n            return  (  \r\n                <li className=\"movies\" key={id} id={id}>\r\n                    <p>{title} ({releaseDate})</p>\r\n                    <img src={Poster}/>\r\n                    <button \r\n                        display='false'\r\n                        disabled={isDisabled}\r\n                        onClick={this.nominate} \r\n                        nomtitle={title} \r\n                        nomyear={releaseDate}\r\n                        nomid={id}\r\n                        nomposter={Poster}\r\n                    >\r\n                    {/* CHANGES TEST FOR WHEN MOVIE IS NOMINATED OF NOT */}\r\n                    {isDisabled \r\n                    ?\r\n                    'Nominated'\r\n                    :\r\n                    'Nominate'\r\n                    }\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <MainContainer>\r\n                <div className=\"results\">\r\n                    <ul>\r\n                        {displayResults}\r\n                    </ul>\r\n                </div>\r\n                <Nominations className=\"nominations\" removeId={this.removeId} movieIds={this.state.movieIds}/>\r\n            </MainContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\nimport Results from './Results';\r\nimport styled from 'styled-components';\r\n\r\nconst SearchContainer = styled.div`\r\n    padding: 20px;\r\n    border: 1px solid black;\r\n\r\n    form {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        label {\r\n            font-weight: 400;\r\n            font-size: 2.5rem;\r\n            letter-spacing: 2px;\r\n        }\r\n\r\n        input[type=search] {\r\n            font-family: FontAwesome;\r\n            font-size: 2rem;\r\n            margin-top: 10px;\r\n            padding: 5px 10px;\r\n            transition: all .3s;\r\n        }\r\n\r\n        input[type=search]:hover,\r\n        input[type=search]:focus {\r\n            background-color: rgb(0,128,96);\r\n            color: #FFF;\r\n        }\r\n\r\n        button {\r\n            width: 120px;\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ResultsContainer = styled.div`\r\n    padding: 20px;\r\n    margin: 20px 0;\r\n    border: 1px solid black;\r\n\r\n    .resultInfo {\r\n        font-size: 2.5rem;\r\n        letter-spacing: 2px;\r\n        color: #000;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        userInput: '',\r\n        res: [],\r\n        error: '',\r\n        loading: '',\r\n        display: ''\r\n    }\r\n// Update userInput to a string with the users movie title search word\r\n    searchParam = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value,\r\n        })\r\n    } \r\n\r\n// Fetch / Get data from the API\r\n    api = (e) => {\r\n        const { userInput} = this.state;\r\n\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            res: []\r\n        })\r\n            const url = `https://www.omdbapi.com/?s=${userInput}&apikey=f33f3c27`;\r\n        fetch(url) \r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const res = data.Search;\r\n\r\n                // ERROR HANDLING IF DATA IS NOT RETURN FROM API\r\n                if(!res) {\r\n                    this.setState({\r\n                        error: 'Movie title not found',\r\n                        display: ''\r\n                    })\r\n                }\r\n\r\n                // DISPLAYS THE MOVIE TITLE THAT WAS SEARCHED\r\n                if(res) {\r\n                    this.setState({\r\n                        res,\r\n                        error: '',\r\n                        display: `Results for \"${userInput}\"`\r\n                    })\r\n                }\r\n            });            \r\n    };\r\n    \r\n    render() {\r\n        const { userInput, res, error, loading, display } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <SearchContainer>\r\n                    <form  onSubmit={this.api}>\r\n                        <label htmlFor=\"search\">Enter the Movie Title</label>\r\n                        <input type=\"search\" id=\"search\" name=\"search\" placeholder=\"&#xf002;  Enter Movie\" value={userInput} onChange={this.searchParam} required/>\r\n                        <button>Search</button>\r\n                    </form>\r\n                </SearchContainer>\r\n\r\n                <ResultsContainer className=\"resContainer\">\r\n                    <p className=\"resultInfo\">{error}{loading}{display}</p>\r\n                    <Results res={res} />\r\n                </ResultsContainer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FooterStyle = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    \r\n    p {\r\n        background-color: rgb(0, 128, 96);\r\n        color: #FFF;\r\n        text-align: center;\r\n        font-size: 3rem;\r\n        padding: 20px;\r\n        width: 100%;\r\n    }\r\n\r\n    a {\r\n        color: rgb(251, 158, 85);\r\n    }\r\n\r\n    @media (max-width: 420px) {\r\n        p {\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <FooterStyle>\r\n            <p>&#169; Future Employee of <span><a href=\"https://www.shopify.ca\">Spotify</a></span> 🙏 <span><a href=\"http://www.ryantjong.com/\">Ryan Tjong's Website</a></span></p>\r\n        </FooterStyle>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Footer from './Footer';\r\nimport '../App.css';\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"bodyColor\">\r\n        <div className=\"wrapper\">\r\n          <h1>The Shoppies<span className=\"headerBackground\">The Shoppies</span></h1>\r\n          <Search />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}