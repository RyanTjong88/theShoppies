{"version":3,"sources":["firebase.js","components/Nominations.js","components/Results.js","components/Search.js","components/Footer.js","components/App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Nominations","state","movieArray","count","dbRef","database","ref","handleRemove","key","child","remove","this","on","response","movies","val","property","push","movie","setState","length","nominated","map","array","title","nomtitle","releaseDate","nomyear","id","nomid","className","onClick","Component","MainContainer","styled","div","Results","firebaseData","movieIds","nominate","e","preventDefault","console","log","target","attributes","value","checkID","result","forEach","movieId","displayResults","props","res","results","Title","Year","imdbID","isDisabled","disabled","SearchContainer","ResultsContainer","Search","userInput","error","loading","display","searchParam","api","url","fetch","then","json","data","onSubmit","htmlFor","type","name","placeholder","onChange","required","FooterStyle","Footer","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f37e07d5.chunk.js","sourcesContent":["import firebase from 'firebase/app';    //firebase\r\nimport 'firebase/database';             //firebase database\r\n\r\n    // Your web app's Firebase configuration\r\n    const firebaseConfig = {\r\n        apiKey: \"AIzaSyCvQZTPOKGyCD5KyV5EsX8xpXBkshrmhXI\",\r\n        authDomain: \"the-shoppies-6b8ee.firebaseapp.com\",\r\n        projectId: \"the-shoppies-6b8ee\",\r\n        storageBucket: \"the-shoppies-6b8ee.appspot.com\",\r\n        messagingSenderId: \"881448932273\",\r\n        appId: \"1:881448932273:web:8f19ae0c0c5da32f01a390\"\r\n    };\r\n    // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n\r\n    export default firebase;\r\n","import React, { Component } from 'react';\r\nimport firebase from '../firebase';  \r\n\r\nclass Nominations extends Component {\r\n\r\n    state = {\r\n        movieArray: [],\r\n        count: 0\r\n    }\r\n\r\n    // open portal to Firebase\r\n    dbRef = firebase.database().ref();\r\n\r\n    //pull data from firebase only the first 5 objects\r\n    componentDidMount() {\r\n        this.dbRef.on('value', (response) => {\r\n\r\n            const movies = response.val()\r\n            const movieArray = []\r\n            \r\n            for (const property in movies) {\r\n                movieArray.push({\r\n                    key: property, \r\n                    movie: movies[property]\r\n                });  \r\n            }\r\n            // console.log(movieArray)\r\n            this.setState({\r\n                movieArray\r\n            }, () => {\r\n                if(this.state.movieArray.length) {\r\n                    this.setState({\r\n                        count: this.state.movieArray.length\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    // Remove Saved Song\r\n    handleRemove = (key) => {\r\n        // Remove data stored in key\r\n        this.dbRef.child(key).remove(); \r\n    }\r\n\r\n    render() {\r\n        const nominated = this.state.movieArray.map(array => {\r\n            \r\n            const title = array.movie.nomtitle\r\n            const releaseDate = array.movie.nomyear\r\n            const id = array.movie.nomid\r\n            const key = array.key\r\n            \r\n            return (<ul key={key}>\r\n                        <li key={key} id={id}>\r\n                            <div className=\"storedMovies\">\r\n                                <p>{title} ({releaseDate})</p>\r\n                                <button \r\n                                    onClick={() => this.handleRemove(key)}\r\n                                    key={key}\r\n                                >\r\n                                Remove\r\n                                </button>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n            );\r\n        })\r\n\r\n        return (\r\n                <div className=\"nomContainer\">\r\n                    { this.state.count === 5 \r\n\r\n                    ? \r\n                    \r\n                    <p className=\"nomCount\">You have nominated {this.state.count} movies</p> \r\n\r\n                    :\r\n\r\n                    null}\r\n\r\n                    {nominated}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nominations;","import React, { Component } from 'react';\r\nimport Nominations from './Nominations';\r\nimport firebase from '../firebase';  \r\nimport styled from 'styled-components';\r\n\r\nconst MainContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    \r\n    div {\r\n        background-color: rgb(0, 128, 96);\r\n        padding-top: 20px;\r\n        ul li {\r\n            display: flex;\r\n        }\r\n    }\r\n\r\n    .results {\r\n        width: 48%;\r\n        min-height: 600px;\r\n    }\r\n\r\n    /* TABLET MEDIA QUERY*/\r\n    @media (max-width: 850px) {\r\n        flex-direction: column;\r\n\r\n        .results {\r\n            width: 100%;\r\n        }\r\n    }\r\n`;\r\n\r\nclass Results extends Component {\r\n\r\n    state = {\r\n        firebaseData: {\r\n            nomtitle: '',\r\n            nomyear: '',\r\n            nomid: ''\r\n        },\r\n        movieArray: [],\r\n        movieIds: '',\r\n    }\r\n\r\n    // open portal to Firebase\r\n    dbRef = firebase.database().ref()\r\n        \r\n    componentDidMount() {\r\n        this.dbRef.on('value', (response) => {\r\n\r\n            const movies = response.val()\r\n            const movieArray = []\r\n            \r\n            for (const property in movies) {\r\n                movieArray.push({\r\n                    key: property, \r\n                    movie: movies[property]\r\n                });  \r\n            }\r\n            this.setState({\r\n                movieArray,\r\n            })\r\n\r\n            const movieIds = []\r\n            this.state.movieArray.map(movies => {\r\n                return movieIds.push(movies.movie.nomid) \r\n            })\r\n\r\n            this.setState({\r\n                movieIds\r\n            })\r\n        })\r\n    }  \r\n\r\n    nominate = (e) => {\r\n        e.preventDefault();\r\n        console.log(e.target.attributes.nomtitle.value, e.target.attributes.nomyear.value,e.target.attributes.nomid.value)\r\n\r\n            const nomtitle = e.target.attributes.nomtitle.value\r\n            const nomyear =  e.target.attributes.nomyear.value\r\n            const nomid =  e.target.attributes.nomid.value\r\n\r\n            this.state.movieArray.map(array => {\r\n                return  this.setState({\r\n                            movieIds: array.movie.nomid\r\n                        })\r\n            })\r\n\r\n            this.setState({\r\n                firebaseData: {\r\n                    nomtitle,\r\n                    nomyear,\r\n                    nomid\r\n                }\r\n            }, () => {\r\n                // add new record to Firebase\r\n                this.dbRef.push(this.state.firebaseData)\r\n            }) \r\n    }\r\n\r\n    checkID = (id) => {\r\n            let result = false\r\n\r\n            if(typeof this.state.movieIds === 'object' ) {\r\n                this.state.movieIds.forEach(movieId => {\r\n                    if(movieId === id) {\r\n                        result = true\r\n                    }\r\n                }) \r\n            }\r\n            return result\r\n        }\r\n\r\n    render() {\r\n        const displayResults = this.props.res.map(results => {\r\n            const title = results.Title\r\n            const releaseDate = results.Year\r\n            const id = results.imdbID\r\n            const isDisabled = this.checkID(id);\r\n\r\n            return  (  \r\n                <li className=\"storedMovies\" key={id} id={id}>\r\n                    <p>{title} ({releaseDate})</p>\r\n                    <button \r\n                        disabled={isDisabled ? 't' : null }\r\n                        onClick={this.nominate} \r\n                        nomtitle={title} \r\n                        nomyear={releaseDate}\r\n                        nomid={id}\r\n                    >\r\n                    Nominate\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <MainContainer>\r\n                <div className=\"results\">\r\n                    <ul>\r\n                        {displayResults}\r\n                    </ul>\r\n                </div>\r\n                <Nominations className=\"nominations\" />\r\n            </MainContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\nimport Results from './Results';\r\nimport styled from 'styled-components';\r\n\r\nconst SearchContainer = styled.div`\r\n    padding: 20px;\r\n    border: 1px solid black;\r\n\r\n    form {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        label {\r\n            font-weight: 400;\r\n            font-size: 2.5rem;\r\n            letter-spacing: 2px;\r\n        }\r\n\r\n        input[type=search] {\r\n            font-family: FontAwesome;\r\n            font-size: 2rem;\r\n            margin-top: 10px;\r\n            padding: 5px 10px;\r\n            transition: all .3s;\r\n        }\r\n\r\n        input[type=search]:hover,\r\n        input[type=search]:focus {\r\n            background-color: rgb(0,128,96);\r\n            color: #FFF;\r\n        }\r\n    }\r\n`;\r\n\r\nconst ResultsContainer = styled.div`\r\n    padding: 20px;\r\n    margin: 20px 0;\r\n    border: 1px solid black;\r\n\r\n    .resultInfo {\r\n        font-size: 2.5rem;\r\n        letter-spacing: 2px;\r\n        color: #000;\r\n        margin-bottom: 20px;\r\n    }\r\n`;\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        userInput: '',\r\n        res: [],\r\n        error: '',\r\n        loading: '',\r\n        display: ''\r\n    }\r\n// Update userInput to a string with the users movie title search word\r\n    searchParam = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value,\r\n        })\r\n    } \r\n\r\n// Fetch / Get data from the API\r\n    api = (e) => {\r\n        const { userInput} = this.state;\r\n\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            res: []\r\n        })\r\n\r\n        const url = `https://www.omdbapi.com/?s=${userInput}&apikey=f33f3c27`;\r\n        fetch(url) \r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const res = data.Search;\r\n\r\n                // ERROR HANDLING IF DATA NT RETURN FROM API\r\n                if(!res) {\r\n                    this.setState({\r\n                        error: 'Movie title not found',\r\n                        display: ''\r\n                    })\r\n                }\r\n\r\n                // DISPLAYS THE MOVIE TITLE THAT WAS SEARCHED\r\n                if(res) {\r\n                    this.setState({\r\n                        res,\r\n                        error: '',\r\n                        display: `Results for \"${userInput}\"`\r\n                    })\r\n                }\r\n            });            \r\n    };\r\n    \r\n    render() {\r\n        const { userInput, res, error, loading, display } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <SearchContainer>\r\n                    <form  onSubmit={this.api}>\r\n                        <label htmlFor=\"search\">Movie Title</label>\r\n                        <input type=\"search\" id=\"search\" name=\"search\" placeholder=\"&#xf002;  Enter Movie\" value={userInput} onChange={this.searchParam} required/>\r\n                    </form>\r\n                </SearchContainer>\r\n\r\n                <ResultsContainer className=\"resContainer\">\r\n                    <p className=\"resultInfo\">{error}{loading}{display}</p>\r\n                    <Results res={res} />\r\n                </ResultsContainer>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FooterStyle = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    \r\n    p {\r\n        background-color: rgb(0, 128, 96);\r\n        color: #FFF;\r\n        text-align: center;\r\n        font-size: 3rem;\r\n        padding: 20px;\r\n        width: 100%;\r\n    }\r\n\r\n    a {\r\n        color: rgb(251, 158, 85);\r\n    }\r\n\r\n    @media (max-width: 420px) {\r\n        p {\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <FooterStyle>\r\n            <p>&#169; Future Employee of <span><a href=\"https://www.shopify.ca\">Spotify</a></span> 🙏 <span><a href=\"http://www.ryantjong.com/\">Ryan Tjong's Website</a></span></p>\r\n        </FooterStyle>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Footer from './Footer';\r\nimport '../App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"bodyColor\">\r\n        <div className=\"wrapper\">\r\n          <h1>The Shoppies</h1>\r\n          <Search />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}